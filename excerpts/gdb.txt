gdb 常用调试 http://blog.csdn.net/roland_sun/article/details/42460663
1、远程调试 
     有时候需要调试的程序并不在本机上，GDB是支持远程调试的，具体命令如下：
     
     (gdb) target remote IP:PORT
     
     这时，本机的GDB客户端可以远程连接到被调试机器上，对程序进行调试。当然，前提是在远端的机器上，必须要启动好GDB服务端程序。
2、运行程序
    gdb: run [ARGS] 在命令的后面可以跟随发送给程序的参数，参数可以包含Shell通配符（*，[…]等），和输入输出重定向符（<，>，>>）。如果你使用不带任何参数的run命令，GDB就再次使用你上次执行run命令时给的参数。

    如果想查看当前默认的参数是什么，可以使用这条命令：gdb: show args ，如果想修改当前默认参数：gdb: set args ARGS ,用start命令是启动到main函数先暂定一下
3、添加断点
    永久断点和临时断点：break 和 tbreak
    (gdb) break 10 #在本地代码的第10行设置断点
    (gdb) break main.c:20 #在main.c源文件中的第20行代码设置断点
    (gdb) break pcap_parse #在本地代码的pcap_parse函数处设置断点
    (gdb) break tcpdump.c:main #在tcpdump.c源文件中的 main函数处设置断点
    (gdb) break *0x12345678 #在地址为0x12345678的指令处设置断点，注意，在对某一个地址的指令下断点时前面要加“*”。
    (gdb) break 50 if size>0 #只有在size变量大于0的情况下断点才起效
    (gdb) rbreak pcap_* #给所有函数名以pcap_打头的函数添加断点
4、添加监视点：监视点（Watch Point），顾名思义，其用途一般是观察一个变量、某个内存地址处存放的数值或者是一个表达式的值，是否被程序读取或修改了。可以使用如下命令设置程序中的监视点
    (gdb) watch [EXPR] 表示设置一个监视点，当所指定的表达式EXPR的值被修改了，则程序会停止。
    (gdb) rwatch [EXPR] 表示设置一个监视点，当所指定的表达式EXPR的值被读取了，则程序会停止。
    (gdb) awatch [EXPR] 表示设置一个监视点，当所指定的表达式EXPR的值被读取或修改了，都会让程序停止。
    (gdb) watch i #当变量i被修改了停止程序
    (gdb) watch *(int *)0x12345678 #当存放在内存地址处的int值被修改了停止程序
    (gdb) watch x+ y #当表达式的值改变时停止程序
5、添加捕捉点：GDB除了可以根据代码的位置以及某个变量的改变为条件使得代码执行中断外，还有一个非常强大的功能，就是当某一个特别的事件发生的时候，也可以捕捉到，并暂停程序
    (gdb) catch [EVENT]
    上面这条命令的意思是，当对应的EVENT事件发生时，停住程序。EVENT可以是下面的内容：
    1）throw：当程序抛出一个异常时；
    2）catch：当程序捕获到一个异常时；
    3）exec：当程序调用exec时；
    4）fork：当程序调用fork时；
    5）vfork：当程序调用vfork时；
    6）syscall：当程序调用系统调用（system calls）时。
6、查看断点/监视点/捕捉点
    (gdb) info breakpoints
7、删除断点/监视点/捕捉点
    (gdb) delete [NUMBER]
    (gdb) delete #删除所有的断点
    (gdb) delete 2 #删除断点号为2的断点
8、禁用/打开断点/监视点/捕捉点
    (gdb) disable [NUMBER]
    (gdb) disable #禁用所有的断点
    (gdb) disable 3 #禁用断点号为3的断点
    (gdb) enable [NUMBER]   用法和disable类似
9、查看寄存器的值：GDB支持查看被调试进程当前常用寄存器的值
    (gdb) info registers[REGISTER]
    (gdb) info registers#查看所有寄存器当前的值
    (gdb) info registers pc #只查看PC寄存器当前的值
    (gdb) info all-registers 前面的命令只会显示常用的寄存器值，而如果想查看所有寄存器的值（包括浮点寄存器），可以使用如下的命令
    同样可以使用print命令来访问寄存器的情况，只需要在寄存器名字前加一个$符号就可以了：(gdb) print $REGISTER
10、修改寄存器的值
    (gdb) set $REGISTER=VALUE
11、查看内存的值
    (gdb) x [/FMT] ADDRESS
        FMT是可选的参数，主要用来告诉GDB以什么格式解析内存中的值以及显示多少数据，其共由三部分组成：
        1）  要显示的数据量，具体显示多少位要看后面指定的长度数据
        2）  显示的格式，共有以下几种情况：
            a)        o（octal）：8进制数
            b)        x（hex）：16进制数
            c)        d（decimal）：10进制数
            d)        t（binary）：2进制数
            e)        f（float）：浮点数
            f)         i（instruction）：指令
            g)        c（char）：单个字符
            h)        s（string）：字符串
        3）  数据单元的长度，共有以下几种情况：
            a)        b（byte）：以1个字节为长度显示数据
            b)        h（halfword）：以半字，也就是2个字节为长度显示数据
            c)        w（word）：以字，也就是4个字节为长度显示数据
            d)        g（giant）：以8个字节为长度显示数据
        下面举一些例子：
        (gdb) x /xw 0x80040000 #以16进制显示指定地址处的数据
        (gdb) x /8s 0x86468700 #显示指定地址处开始的8个字符串
        (gdb) x /50i main #显示main函数开头的50条指令
12、修改内存的值
    (gdb) set *ADDRESS=VALUE
    (gdb) set *0xb6d2a908=0 #将该地址指向的字节设置为0
    (gdb) set *(int *)0xb6daaaec=15 #将该地址指向的整数设置为15
    (gdb) set *(int**)0x8048a548=0x55aa55aa  #将该地址指向的地址设置为新值
13、查看调用堆栈
    (gdb) backtrace 1 #只显示最上面的1个栈帧的概要信息
    (gdb) backtrace full -2 #只显示最后的2个栈帧的详细信息
    此外，与backtrace等效的命令还有where和info stack：
    另外，还有一个命令，如果想查看当前栈帧中的异常处理器，也就是显示当前函数中的异常处理信息，可以使用下面的命令：
    (gdb) info catch
14、查看变量的值
     在gdb中，可以随时查看程序的以下三种变量的值：全局（所有文件可见）、静态全局（当前文件可见）、局部变量
     (gdb) print VAR
     (gdb) print *VAR@LEN 参数就是你要显示的变量名。如果你需要查看的变量是一个数组，存储在一段连续的内存空间中，则可以使用GDB的“@”操作符，其左边是第一个内存的地址的值，右边是想查看内存的长度
     (gdb) info locals 如果想显示当前栈帧中包含的所有局部变量的值
     (gdb) info args 查看函数入参变量的值
     (gdb) whatis VAR 看某个变量在代码中被定义的类型
15、自动显示
    (gdb) display[/FMT] EXPR
    (gdb) info display 当前设置了哪些要自动显示的表达式
    (gdb) undisplay [NUMBER] 删除自动显示表达式
    (gdb) disable display [NUMBER] 禁用自动表达式、
16、调试控制
    (gdb) next -----step over
    (gdb) step -----step info单步
    (gdb) finish 程序一直执行到当前函数结束返回
    (gdb) until [LOCATION] 当前停止的位置一直继续运行，直到到达指定的位置结束
    (gdb) continue [NUMBER] 指定了参数NUMBER表示可以忽略NUMBER次断点
    (gdb) continue 5 #遇到5个断点不停止，直到第6次遇到断点
    (gdb) return [EXPR]
    (gdb) return 0 #退出当前函数并返回0
17、查看源码
    (gdb) list 100 #列出当前代码文件中第100行附近代码
    (gdb) list tcpdump.c:450 #列出tcpdump.c文件中第450行附近代码
    (gdb) list main #列出当前代码文件中main函数附近代码
    (gdb) list inet.c:pcap_lookupdev #列出inet.c代码文件中指定函数附近代码
    (gdb) list FIRST,LAST
    (gdb) set listsize COUNT list命令默认只会打印出10行源代码，如果觉得不够，可以使用
    (gdb) info functions 这个命令会显示程序中所有函数的名词，参数格式，返回值类型以及函数处于哪个代码文件中。
18、查看汇编代码：   如果被调试程序没有包含源码的信息，那么也可以查看当前程序的汇编代码
    (gdb) disassemble START,END
   *(gdb) set disassemble-next-line on 如果想单步执行之后，看到下一步要执行的汇编指令
   (gdb) set arm fallback-mode MODE 关于ARM，还有一点值得注意的。大家知道，ARM处理器支持两种指令集，一种就是ARM，还有一种是Thumb，那么在显示汇编代码时，GDB将怎么解释二进制代码呢？到底解释成ARM还是Thumb呢？如果有符号表，那么GDB就使用符号表来决定指令是 ARM指令还是Thumb指令。如果被调试程序没有符号表的话，可以使用如下命令指定：
   作为参数的模式MODE有三种：
	1）  arm：将二进制代码用ARM指令解释；
	2）  thumb：将二进制代码用Thumb指令解释；
	3）  auto：让GDB使用当前的执行模式（从CPSR寄存器的T位得到）。
	(gdb) show arm fallback-mode 看当前使用的是那种解释模式
19、命令简写
全命令 简写命令
break   b
list    l
info    i
backtrace bt
frame   f
continue c
next    n
step    s
nexti   ni
stepi   si
delete  d
print   p