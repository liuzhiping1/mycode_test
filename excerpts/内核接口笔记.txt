 需要完善这些接口的参数和用法
 static inline int signal_pending(struct task_struct *p) 判断进程p是否是信号唤醒
 schedule()调度进程
 __set_current_state()切换进程状态
 register_chrdev_region()静态分配设备号
 alloc_chrdev_region()动态分配设备号
 kzmalloc()分配内核空间并且清0
 int select(int numfds, fd_set *readfds,fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);应用程序中最广泛用到的系统调用，监控readfds和writefds等这些文件是否可读，其中另一个可读即可返回，否者阻塞。
 FD_ZERO(fd_set *set)清除一个文件描述符集合
 FD_SET(int fd,fd_set *set)将一个文件描述符加入文件描述符集合中
 FD_CLR(int fd,fd_set *set)将一个文件秒速符从文件描述符集合中删除
 int poll(struct pollfd *fds,nfds_t nfds,int timeout);监控多路复用文件
 int epoll_create(int size);创建一个epoll的句柄，必须调用close()关闭
 int epoll_ctl(int epfd,int op, int fd, struct epoll_event *event);监听什么类型的事件
 unsigned int (*poll) (struct file *filp, struct poll_table* wait);设备驱动的轮询，对可能引起设备文件状态变化的等待队列调用poll_wait()函数，将对应的等待队列头部添加到poll_table中。返回表示是否能对设备进行无阻塞读、写访问的掩码。
 void poll_wait(struct file * filp, wait_queue_heat_t *queue, poll_table* wait); 向poll_table注册等待队列
 void (*signal(int signum, void (*handler))(int))(int);
 typedef void (*sighandler_t)(int);
 sighandler_t signal(int signum, sighandler_t handler);
 int fcntl(int fd, int cmd, struct flock *lock);
 int io_setup(int maxevents, io_context_t *ctxp);
 int io_destroy(io_context_t ctx);
 int io_cancel(io_context_t ctx,struct iocb *iocb,struct io_event *evt);
 int io_getevents(io_context_t ctx, long min_nr, long nr, struct io_event *events, struct timespec *timeout);
 void io_set_callback(struct iocb *iocb, io_callback_t cb);
 int request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags, const char *name, void *dev);
 void free_irq(unsigned int irq, void *dev_id);
 void disable_irq(int irq) 等待目前的中断处理完成
 void disable_irq_nosync(int irq) 不等待目前的中断处理完成，直接干死
 void enable_irq(int irq)
 #define local_irq_save(flags) ...  屏蔽cpu所有中断
 void local_irq_disable(void); 屏蔽cpu内所有中断
 DECLARE_TASKLET(my_tasklet,my_tasklet_func,data);
 tasklet_schedule(&my_tasklet);调度tasklet
 工作队列：struct work_struct my_wq;INIT_WORK(&my_wq,my_func);schedule_work(&my_wq)
 mod_timer()触发定时
 atomic_inc()原子操作增加1
 init_timer()初始化定时器
 add_timer()添加定时器
 atomic_set()赋值操作
 del_timer()移除定时器
 atomic_read()原子读
 put_user()复制到用户空间
 ndelay()/udelay()/mdelay() 内核延时 在内核中最好不要直接使用mdelay函数，这将耗费cpu资源
 msleep()
 time_before(jiffies,delay)/time_after(jiffies,delay)  长延时
 schedule_timeout() 睡着延迟
 【内存与IO访问】
 virt_to_phys()、phys_to_virt() 虚拟和物理内存的转换，仅适用于DMA和常规区域，高端内存没这么简单的换算关系
 malloc()/free()用户空间的动态内存申请和释放
 kmalloc()和__get_free_pages()申请的内存位于DMA和常规区域的映射区，而且物理上也是连续的，他们与真实的物理地址只有一个固定的偏移
 vmalloc()在虚拟内存空间是连续的，但是物理山不一定
 ioremap()映射
 iounmap()解映射
 inb()读字节端口
 outb()写字节端口
 inw()读字端口
 outw()写字端口
 readb_relaxed()、readw_relaxed()。。。 读寄存器api 没有内存屏障
 readb()、readw()。。。读寄存器api 有内存屏障
 request_region(unsigned long first, unsigned long n,const char *name)向内核申请n个IO端口
 release_region()释放IO端口
 request_mem_region(unsigned long start, unsigned long len,char *name)向内核申请n个IO内存地址
 release_mem_region()释放IO内存
 int (*mmap) (struct file *, struct vm_area_struct *);这个是file_opreation结构体中的mmap函数指针，它在用户进行mmap()系统调用时最终被调用
 【spi】
 struct spi_master *spi_alloc_master()
 int spi_register_master()
 void spi_unregister()